#! /usr/bin/env node
'use strict';

const path = require('path');
const util = require('util');
const Loader = require('yaml-config-loader');
const yargs = require('yargs');

const loader = new Loader();

var ReaperCLI = require('../lib/ReaperCLI');
var Server = require('../lib/Server');

loader.on('error', function(error) {
  if (error.name === 'YAMLException') {
    console.error(util.print('Error parsing YAML file `', error.filePath, '`:', error.reason));
    console.log(error);
  }
});

function cliProcessing(argv, done) {
  if (argv.help) {
    yargs.showHelp();
  }

  loader.add(path.resolve(path.join(__dirname, '..', 'defaults.yaml')), {allowedKeys: true});
  if (argv.config) {
    argv.config = Array.isArray(argv.config) ? argv.config : [argv.config];
    argv.config.forEach(function(file) {
      loader.addFile(path.resolve(file));
    });
  }
  loader.addAndNormalizeObject(process.env);
  loader.addAndNormalizeObject(argv);

  loader.load(done);
}

function reap() {
  yargs
    .help('help')
    .alias('help', 'h')
    .option('config', {
      describe: 'A YAML config file or directory of yaml files to load, can be invoked multiple times and later files will override earlier.',
      alias: 'c',
    })
    .option('dry-run', {
      describe: 'Only perform a dry run and list containers to be deleted, but don\'t delete them.',
      type: 'boolean',
    });

  loader.addSchema({
    'dry-run': Boolean,
    'status': Boolean,
  });

  cliProcessing(yargs.argv, function(error, config) {
    if (error) {
      console.error(error);
      throw error;
    }

    new ReaperCLI(config).run(config);
  });
}

function server() {
  yargs
    .help('help')
    .alias('help', 'h')
    .option('config', {
      describe: 'A YAML config file or directory of yaml files to load, can be invoked multiple times and later files will override earlier.',
      alias: 'c',
    })
    .options('data-directory', {
      describe: 'The directory in which to store leveldb data.',
      alias: 'd',
    });

  cliProcessing(yargs.argv, function(error, config) {
    if (error) {
      console.error(error);
      throw error;
    }

    let eventStreamConfig = config.eventStreams.build_events.config;
    eventStreamConfig.plugin = config.eventStreams.build_events.plugin;

    var options = {
      eventStreamConfig: eventStreamConfig,
      dataDirectory: config.dataDirectory,
      containerManagerUrl: `http://${config.cmHostname}:${config.cmPort}`,
      apiServerHost: config.apiServerHost,
      apiServerPort: config.apiServerPort,
      perBranchBuildLimit: config.perBranchBuildLimit,
      limitRuleExclutions: config.limitRuleExclutions,
      dbUrl: config.dbUrl,
    };
    var reaperServer = new Server(options);
    reaperServer.start();
  });
}

// TODO: We should factor out the subcommand handling in probo into its own project
// to better enable these fluent style interfaces in a more generic way.
var command = yargs.argv._[0];
switch (command) {
  case 'reap':
    reap();
    break;

  case 'server':
    server();
    break;

  default:
    var validCommands = [
      {
        command: 'reap',
        helpText: 'runs a reap on all old builds.',
      },
      {
        command: 'server',
        helpText: 'starts the listener which will enforce limits continuously.',
      },
    ];
    console.error('Invalid argument. Valid commands are:');
    validCommands.forEach(function(val) {
      console.error(`"${val.command}" - ${val.helpText}`);
    });
    console.error('For more help run any command with "-h" for more detailed help.');
    break;
}
